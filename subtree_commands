#!/bin/bash

function subtree() {
	
	# Set global sub tree variable
	__get_sub_trees

	command=$1
	tree=$2

	if [ "$#" -ne 2 ]
	then
  		echo "Usage: subtree [add|pull|push] [Relative/path/to/subtree]"
  		return 1
	fi

	#local="TestLibA"

	index=1
	for i in "${TREES[@]}"
	do
		if [ "$i" = "$tree" ]; then
			local=$LOCALS[$index]
			echo "set local: $local"
			break;
		fi
		index=$(expr $index + 1)
	done

	if [ -z $local ]; then
		echo "Subtree with name $tree not found in .subtrees"
		return 1
	fi

	git subtree $command --prefix $tree $local master
}

function __get_sub_trees() {
	local INPUT=.subtrees
	local OLDIFS=$IFS
	TREES=()
	LOCALS=()
	URLS=()
	IFS=,
	[ ! -f $INPUT ] && { echo "$INPUT file not found in the folder"; return 1; }

	# Get the subtree location from the .subtrees file.
	while read tree local url
	do
		TREES+=($tree)
	        LOCALS+=($local)
		URLS+=($url)
	done < $INPUT

	IFS=$OLDIFS
}

function commit_work() {
	# Unstage files if there are any, For example they could have been auto-added on "git rm".
	git reset HEAD

	__get_sub_trees

	# Loop through each subtree and first add files and then commit them. You will be prompted to write a commit message for each subtree.
	for i in "${LOCALS[@]}"
	do
        	git add --all $i
        	git commit
	done

	# Finally add everything that's outside of the subtrees.
	git add .
	git commit
}
