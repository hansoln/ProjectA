#!/bin/bash

function subtree() {
	if [ "$#" -ne 2 ]
	then
  		echo "Usage: subtree [add|pull|push] [Relative/path/to/subtree]"
  		return 1
	fi
	
	command=$1
	subtree=$2

	# Set global sub tree variable
	__get_sub_trees success

	if [ $success -eq 0 ]; then
		return 1
	fi

	index=1
	for i in "${TREES[@]}"
	do
		if [ "$i" = "$subtree" ]; then
			local=$LOCALS[$index]
			break;
		fi
		index=$(expr $index + 1)
	done

	if [ -z $local ]; then
		echo "Subtree with name $subtree not found in .subtrees"
		return 1
	fi

	git subtree $command --prefix $subtree $local master
}

function __get_sub_trees() {
	local INPUT=.subtrees
	local OLDIFS=$IFS
	TREES=()
	LOCALS=()
	URLS=()
	IFS=,
	[ ! -f $INPUT ] && { echo "The $INPUT file could not be found. Are you in the correct directory?"; eval $1=0; return 1; }

	# Get the subtree location from the .subtrees file.
	while read tree local url
	do
		TREES+=($tree)
	        LOCALS+=($local)
		URLS+=($url)
	done < $INPUT

	IFS=$OLDIFS
	eval $1=1
}

function commit_work() {
        # Set global sub tree variable
        __get_sub_trees success
        
        if [ $success -eq 0 ]; then
                return 1
        fi

	# Unstage files if there are any, For example they could have been auto-added on "git rm".
	git reset HEAD

	# Loop through each subtree and first add files and then commit them. You will be prompted to write a commit message for each subtree.
	for i in "${LOCALS[@]}"
	do
        	git add --all $i
        	git commit
	done

	# Finally add everything that's outside of the subtrees.
	git add .
	git commit

        # Unstage files if the user aborts a commit.
        git reset HEAD

}
